name: HealthHub Deploy Production

on:
  workflow_run:
    workflows: ["HealthHub Build Pipeline"]  # Wait for build, not CI
    types: [completed]
    branches: [main]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'

jobs:
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: 
      name: production
      url: https://d1aylx7zsl7bap.cloudfront.net
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          role-session-name: HealthHub-Deploy-Prod

      - name: Wait for build pipeline completion
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "🔍 Checking if build pipeline completed for commit ${{ github.sha }}"
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            build_status=$(gh run list --workflow="HealthHub Build Pipeline" --json headSha,status,conclusion --jq '.[] | select(.headSha == "${{ github.sha }}") | .conclusion')
            
            if [ "$build_status" = "success" ]; then
              echo "✅ Build pipeline completed successfully"
              break
            elif [ "$build_status" = "failure" ]; then
              echo "❌ Build pipeline failed"
              exit 1
            else
              echo "⏳ Build pipeline still running (attempt $attempt/$max_attempts)..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Timeout waiting for build pipeline"
            exit 1
          fi

      # Step 1: Deploy Infrastructure First
      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform
          terraform init
          terraform workspace select production || terraform workspace new production
          terraform apply -auto-approve -var="environment=production"

      # Step 2: Frontend is deployed by Terraform automatically
      - name: Verify frontend deployment
        run: |
          cd infrastructure/terraform
          echo "✅ Frontend deployed via Terraform"
          echo "🌐 CloudFront URL: $(terraform output -raw cloudfront_url 2>/dev/null || echo 'https://d1aylx7zsl7bap.cloudfront.net')"

      # Step 3: Deploy Backend to Staging First
      - name: Install backend dependencies
        run: |
          cd health-hub-backend
          npm install

      - name: Deploy backend to staging
        run: |
          cd health-hub-backend
          echo "🚀 Deploying to staging environment first..."
          npx @serverless/compose deploy --stage staging

      # Step 4: Run Smoke Tests on Staging
      - name: Run smoke tests on staging
        run: |
          cd health-hub-backend
          echo "🧪 Running smoke tests on staging..."
          npm run test:smoke:staging

      # Step 5: Deploy to Production (only if staging tests pass)
      - name: Deploy backend to production
        run: |
          cd health-hub-backend
          echo "✅ Staging tests passed! Deploying to production..."
          npx @serverless/compose deploy --stage production

      # Step 6: Run Production Smoke Tests
      - name: Run production smoke tests
        run: |
          cd health-hub-backend
          echo "🧪 Running final smoke tests on production..."
          npm run test:smoke:prod

      # Step 7: Rollback on Failure
      - name: Rollback on smoke test failure
        if: failure()
        run: |
          cd health-hub-backend
          echo "💥 Production smoke tests failed! Rolling back..."
          # Note: Add rollback logic here if needed
          echo "⚠️ Manual intervention required for rollback"
          exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ HealthHub Production Deployment Successful"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()
