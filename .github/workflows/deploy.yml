name: 🚀 HealthHub CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'

jobs:
  # Code Quality and Testing
  quality-check:
    name: 🔍 Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🧹 Lint Code
        run: npm run lint
        
      - name: 🧪 Run Unit Tests
        run: npm run test:coverage
        
      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: backend
          
      - name: 🔒 Security Audit
        run: npm audit --audit-level moderate

  # Infrastructure Validation
  terraform-validate:
    name: 🏗️ Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          
      - name: 🔍 Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ./terraform
        
      - name: ✅ Terraform Validate
        run: |
          terraform init -backend=false
          terraform validate
        working-directory: ./terraform

  # Development Environment Deployment
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [quality-check, terraform-validate]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 🏗️ Deploy Infrastructure
        run: |
          cd terraform
          terraform init
          terraform plan -var-file="environments/dev/terraform.tfvars"
          terraform apply -auto-approve -var-file="environments/dev/terraform.tfvars"
        env:
          TF_VAR_environment: dev
          
      - name: 📦 Install Serverless Framework
        run: npm install -g serverless@3
        
      - name: 🚀 Deploy Backend Services
        run: |
          serverless deploy --stage dev --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: 🎨 Build Frontend
        run: |
          cd health-hub-frontend
          npm ci
          npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.DEV_API_URL }}
          VITE_ENVIRONMENT: development
          
      - name: 📤 Deploy Frontend to S3
        run: |
          aws s3 sync health-hub-frontend/dist/ s3://${{ secrets.DEV_FRONTEND_BUCKET }}/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DEV_CLOUDFRONT_ID }} --paths '/*'

  # Staging Environment Deployment
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, terraform-validate]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 🏗️ Deploy Infrastructure
        run: |
          cd terraform
          terraform init
          terraform plan -var-file="environments/staging/terraform.tfvars"
          terraform apply -auto-approve -var-file="environments/staging/terraform.tfvars"
        env:
          TF_VAR_environment: staging
          
      - name: 📦 Install Serverless Framework
        run: npm install -g serverless@3
        
      - name: 🚀 Deploy Backend Services
        run: |
          serverless deploy --stage staging --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: 🎨 Build Frontend
        run: |
          cd health-hub-frontend
          npm ci
          npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.STAGING_API_URL }}
          VITE_ENVIRONMENT: staging
          
      - name: 📤 Deploy Frontend to S3
        run: |
          aws s3 sync health-hub-frontend/dist/ s3://${{ secrets.STAGING_FRONTEND_BUCKET }}/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT_ID }} --paths '/*'
          
      - name: 🧪 Run Integration Tests
        run: npm run test:integration
        env:
          API_BASE_URL: ${{ secrets.STAGING_API_URL }}

  # Production Deployment (Manual Approval Required)
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 🏗️ Deploy Infrastructure
        run: |
          cd terraform
          terraform init
          terraform plan -var-file="environments/prod/terraform.tfvars"
          terraform apply -auto-approve -var-file="environments/prod/terraform.tfvars"
        env:
          TF_VAR_environment: prod
          
      - name: 📦 Install Serverless Framework
        run: npm install -g serverless@3
        
      - name: 🚀 Deploy Backend Services
        run: |
          serverless deploy --stage prod --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          
      - name: 🎨 Build Frontend
        run: |
          cd health-hub-frontend
          npm ci
          npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.PROD_API_URL }}
          VITE_ENVIRONMENT: production
          
      - name: 📤 Deploy Frontend to S3
        run: |
          aws s3 sync health-hub-frontend/dist/ s3://${{ secrets.PROD_FRONTEND_BUCKET }}/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.PROD_CLOUDFRONT_ID }} --paths '/*'
          
      - name: 🏥 Health Check
        run: |
          curl -f ${{ secrets.PROD_API_URL }}/health || exit 1
          
      - name: 📢 Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🎉 HealthHub Production Deployment Successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security Scanning
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📊 Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🔐 Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Performance Testing
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Install Artillery
        run: npm install -g artillery@latest
        
      - name: ⚡ Run Load Tests
        run: |
          artillery run tests/load-test.yml --target ${{ secrets.STAGING_API_URL }}
          
      - name: 📊 Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: artillery-report.html

  # Cleanup
  cleanup:
    name: 🧹 Cleanup Resources
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-dev, deploy-staging, deploy-production]
    
    steps:
      - name: 🗑️ Clean up temporary resources
        run: |
          echo "Cleaning up temporary resources..."
          # Add cleanup commands here if needed
