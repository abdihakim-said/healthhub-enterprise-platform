openapi: 3.0.3
info:
  title: HealthHub User Service API
  description: User management service for HealthHub healthcare platform
  version: 1.0.0
  contact:
    name: HealthHub SRE Team
    email: sre@healthhub.com

servers:
  - url: https://api.healthhub.com/users
    description: Production server
  - url: https://staging-api.healthhub.com/users
    description: Staging server

paths:
  /users:
    post:
      summary: Create a new user
      description: Creates a new user account with validation
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              patient:
                summary: Patient user
                value:
                  email: "patient@example.com"
                  name: "John Doe"
                  phone: "+1-555-123-4567"
              doctor:
                summary: Doctor user
                value:
                  email: "doctor@example.com"
                  name: "Dr. Jane Smith"
                  phone: "+1-555-987-6543"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_email:
                  summary: Invalid email format
                  value:
                    error: "Validation error: \"email\" must be a valid email"
                missing_name:
                  summary: Missing required field
                  value:
                    error: "Validation error: \"name\" is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: List all users
      description: Retrieves a list of all users (admin only)
      operationId: listUsers
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves a specific user by their UUID
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User UUID
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid id: \"id\" must be a valid GUID"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user
      description: Updates an existing user's information
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete user
      description: Permanently deletes a user account
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User UUID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's full name
          example: "John Doe"
        phone:
          type: string
          pattern: '^\+?[\d\s-()]+$'
          description: User's phone number
          example: "+1-555-123-4567"
        dateOfBirth:
          type: string
          format: date
          description: User's date of birth
          example: "1990-01-15"

    UpdateUserRequest:
      type: object
      minProperties: 1
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "newemail@example.com"
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's full name
          example: "Jane Smith"
        phone:
          type: string
          pattern: '^\+?[\d\s-()]+$'
          description: User's phone number
          example: "+1-555-987-6543"
        dateOfBirth:
          type: string
          format: date
          description: User's date of birth
          example: "1985-03-20"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        name:
          type: string
          description: User's full name
          example: "John Doe"
        phone:
          type: string
          description: User's phone number
          example: "+1-555-123-4567"
        dateOfBirth:
          type: string
          format: date
          description: User's date of birth
          example: "1990-01-15"
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        lastLogin:
          type: string
          format: date-time
          description: Last login timestamp
          example: "2024-01-20T14:45:00Z"

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: "Validation error: \"email\" must be a valid email"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: Users
    description: User management operations
